package com.miratech.gta.services;

import com.miratech.gta.model.State;

import java.util.List;

/**
 * This interface describe methods to work with states and contains state storage. Storage can be
 * database, or RAM memory, or any different type.
 */
public interface StateManager {

    /**
     * Method finds component by ID, and return real time state of component.
     *
     * @param componentID - unique ID of component
     */
    List<State> getRealtimeStateByName(String componentID);

    /**
     * Method finds component by ID, and return history of states of component.
     *
     * @param componentID - unique ID of component
     */
    List<State> getHistoryOfStates(String componentID);

    /**
     * Return realtime state of all components, which have own collector.
     */
    List<State> getAllRealtimeStates();

    /**
     * Return history of states of all components, which have own collector.
     */
    List<State> getAllHistoryOfStates();

    /**
     * Return system states of all components,
     */
    List<State> getAllSystemHistoryStates();

    /**
     * @return  last system state
     */
    State getCurrentSystemState();


    /**
     * Method used to put newly state to realtime storage.
     * @param state - state object, generated by collector
     */
    void putToRealtime(State state);

    /**
     * Method to put newly state to historical storage.
     * @param state - state object, generated by collector.
     */
    void putToHistorical(State state);

}
